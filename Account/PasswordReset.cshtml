@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Password Reset";

    var passwordResetToken = Request.Form["resetToken"] ?? Request.QueryString["resetToken"];

    if(Request.QueryString["resetToken"] == null) { Response.Redirect("~/"); }

    bool tokenExpired = false;
    bool isSuccess = false;

    // Setup validation
    Validation.RequireField("newPassword", "The new password field is required.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("newPassword", "The new password and confirmation password do not match."));
    Validation.RequireField("passwordResetToken", "The password reset token field is required.");
    Validation.Add("newPassword",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "New password must be at least 6 characters"));

    if (IsPost && Validation.IsValid()) {
        AntiForgery.Validate();
        var newPassword = Request["newPassword"];
        var confirmPassword = Request["confirmPassword"];

        if (WebSecurity.ResetPassword(passwordResetToken, newPassword)) {
            isSuccess = true;
        } else {
            ModelState.AddError("passwordResetToken", "The password reset token is invalid.");
            tokenExpired = true;
        }
    }
}

<hgroup class="title">
    <h1>@Page.Title</h1>
</hgroup>

<div class="row">

    <div class="col-md-7">
    @if (!WebMail.SmtpServer.IsEmpty()) {
    if (!Validation.IsValid()) {
        <div class="alert alert-danger">
            @if (tokenExpired) {
                <text>The password reset token is incorrect or may be expired. Visit the <a href="~/Account/ForgotPassword">forgot password page</a> 
                to generate a new one.
                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                </text>
            } else {
                <text>Could not reset password. Please correct the errors and try again.
                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                </text>
            }
        </div>
    }

    if (isSuccess) {
        <div class="alert alert-success">
            Password changed! Click <a href="~/Account/Login" title="Log in">here</a> to log in.
        </div>
    }

    <form class="form-horizontal" method="POST" role="form">
        @AntiForgery.GetHtml()
        <fieldset>
            <legend>Use the form below to reset your password</legend>
            <div class="form-group">
                    <label for="newPassword" class="col-sm-4" @if (!ModelState.IsValidField("newPassword")) {<text>class="error-label"</text>}>New password</label> 
                    <div class="col-sm-8">
                    <input type="password" class="form-control" id="newPassword" name="newPassword" disabled="@isSuccess" @Validation.For("newPassword") />
                    @Html.ValidationMessage("newPassword")
                    </div>
            </div>
                    

            <div class="form-group">
                    <label for="confirmPassword" class="col-sm-4" @if (!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>}>Confirm password</label> 
                    <div class="col-sm-8">    
                    <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" disabled="@isSuccess" @Validation.For("confirmPassword") />
                    @Html.ValidationMessage("confirmPassword")
                    </div>
            </div>

            <div class="form-group">
                    <label class="col-sm-4">Reset Token</label>    
                    <div class="col-sm-8">    
                    <input readonly="readonly" type="text" class="form-control" id="resetToken" name="resetToken" value="@passwordResetToken" disabled="@isSuccess" @Validation.For("resetToken") />
                    @Html.ValidationMessage("resetToken")
                    </div>
            </div>

            <div class="form-group">
                    <label class="col-sm-4">&nbsp;</label>
                    <div class="col-sm-8">
                    <input type="submit" class="btn btn-success btn-lg" value="Reset password" disabled="@isSuccess"/>
                    </div>
            </div>
        </fieldset>
    </form>
} else {
    <p class="message-info">
        Password recovery is disabled for this website because the SMTP server is 
        not configured correctly. Please contact the owner of this site to reset 
        your password.
    </p>
}
    </div>

    <div class="col-md-*"></div>

</div><!-- end of /.row -->